<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (783,452,750 samples, 0.01%)</title><rect x="1187.8" y="181" width="0.1" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1190.79" y="191.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (897,601,193 samples, 0.02%)</title><rect x="1188.4" y="53" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1191.43" y="63.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (1,065,378,361 samples, 0.02%)</title><rect x="1188.2" y="133" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.18" y="143.5" ></text>
</g>
<g >
<title>all (5,858,947,410,121 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>mul_sum_i8_pairs_float (1,134,535,013,155 samples, 19.36%)</title><rect x="648.9" y="117" width="228.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="651.88" y="127.5" >mul_sum_i8_pairs_float</text>
</g>
<g >
<title>[perf_4.19] (988,265,868 samples, 0.02%)</title><rect x="1188.4" y="181" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.41" y="191.5" ></text>
</g>
<g >
<title>runtime.gcDrain (715,689,360 samples, 0.01%)</title><rect x="10.3" y="245" width="0.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="13.33" y="255.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (900,437,406 samples, 0.02%)</title><rect x="1188.4" y="69" width="0.2" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1191.43" y="79.5" ></text>
</g>
<g >
<title>ggml_compute_forward_mul_mat (62,836,125,086 samples, 1.07%)</title><rect x="1172.6" y="133" width="12.6" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1175.57" y="143.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,168,092,755 samples, 0.02%)</title><rect x="1188.4" y="245" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.41" y="255.5" ></text>
</g>
<g >
<title>ggml_vec_dot_f16 (22,545,605,064 samples, 0.38%)</title><rect x="23.0" y="133" width="4.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="26.03" y="143.5" ></text>
</g>
<g >
<title>ggml_compute_forward_soft_max (672,454,834 samples, 0.01%)</title><rect x="1172.1" y="149" width="0.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1175.08" y="159.5" ></text>
</g>
<g >
<title>acpi_ps_parse_aml (929,115,147 samples, 0.02%)</title><rect x="10.5" y="165" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="13.49" y="175.5" ></text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (26,671,175,257 samples, 0.46%)</title><rect x="17.7" y="133" width="5.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="20.66" y="143.5" ></text>
</g>
<g >
<title>new_sync_write (1,066,484,394 samples, 0.02%)</title><rect x="1188.2" y="149" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1191.18" y="159.5" ></text>
</g>
<g >
<title>ggml_compute_forward_mul_f32 (838,241,516 samples, 0.01%)</title><rect x="11.4" y="133" width="0.2" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="14.43" y="143.5" ></text>
</g>
<g >
<title>ksys_write (910,744,610 samples, 0.02%)</title><rect x="1188.4" y="117" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1191.43" y="127.5" ></text>
</g>
<g >
<title>[unknown] (5,845,057,478,392 samples, 99.76%)</title><rect x="10.8" y="293" width="1177.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.84" y="303.5" >[unknown]</text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (2,280,576,223 samples, 0.04%)</title><rect x="993.6" y="133" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="996.56" y="143.5" ></text>
</g>
<g >
<title>mul_sum_i8_pairs_float (550,652,235 samples, 0.01%)</title><rect x="1185.1" y="117" width="0.1" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1188.11" y="127.5" ></text>
</g>
<g >
<title>do_idle (1,762,668,692 samples, 0.03%)</title><rect x="1188.7" y="245" width="0.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1191.71" y="255.5" ></text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (5,072,479,112 samples, 0.09%)</title><rect x="998.5" y="133" width="1.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1001.50" y="143.5" ></text>
</g>
<g >
<title>llama_sampling_sample (1,685,146,317 samples, 0.03%)</title><rect x="1187.7" y="245" width="0.3" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="1190.69" y="255.5" ></text>
</g>
<g >
<title>start_secondary (4,577,879,661 samples, 0.08%)</title><rect x="1189.1" y="277" width="0.9" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.07" y="287.5" ></text>
</g>
<g >
<title>start_kernel (1,763,160,983 samples, 0.03%)</title><rect x="1188.7" y="277" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1191.71" y="287.5" ></text>
</g>
<g >
<title>dockerd (776,266,996 samples, 0.01%)</title><rect x="10.3" y="309" width="0.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.31" y="319.5" ></text>
</g>
<g >
<title>llama_decode_internal (5,767,907,933,554 samples, 98.45%)</title><rect x="10.9" y="229" width="1161.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="13.86" y="239.5" >llama_decode_internal</text>
</g>
<g >
<title>ggml_compute_forward_mul_mat (4,404,925,854,216 samples, 75.18%)</title><rect x="11.6" y="149" width="887.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="14.60" y="159.5" >ggml_compute_forward_mul_mat</text>
</g>
<g >
<title>ggml_compute_forward_dup (1,717,244,604 samples, 0.03%)</title><rect x="11.1" y="133" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="14.08" y="143.5" ></text>
</g>
<g >
<title>sum_i16_pairs_float (115,172,934,803 samples, 1.97%)</title><rect x="1145.2" y="85" width="23.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1148.22" y="95.5" >s..</text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (1,183,011,671 samples, 0.02%)</title><rect x="27.3" y="117" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="30.33" y="127.5" ></text>
</g>
<g >
<title>acpi_ps_parse_loop (855,675,719 samples, 0.01%)</title><rect x="10.5" y="149" width="0.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="13.51" y="159.5" ></text>
</g>
<g >
<title>ggml_vec_dot_q4_0_q8_0 (4,246,012,963,938 samples, 72.47%)</title><rect x="27.6" y="133" width="855.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="30.57" y="143.5" >ggml_vec_dot_q4_0_q8_0</text>
</g>
<g >
<title>__generic_file_write_iter (1,059,862,443 samples, 0.02%)</title><rect x="1188.2" y="117" width="0.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1191.18" y="127.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,168,092,755 samples, 0.02%)</title><rect x="1188.4" y="261" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.41" y="271.5" ></text>
</g>
<g >
<title>ggml_vec_dot_q4_0_q8_0 (846,287,786,556 samples, 14.44%)</title><rect x="999.5" y="133" width="170.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1002.52" y="143.5" >ggml_vec_dot_q4_0_q8_0</text>
</g>
<g >
<title>ggml_compute_forward_rope (1,799,505,933 samples, 0.03%)</title><rect x="1171.7" y="149" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1174.70" y="159.5" ></text>
</g>
<g >
<title>ggml_compute_forward_relu_f32 (862,318,327 samples, 0.01%)</title><rect x="1172.2" y="117" width="0.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1175.21" y="127.5" ></text>
</g>
<g >
<title>vfs_write (908,107,757 samples, 0.02%)</title><rect x="1188.4" y="101" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.43" y="111.5" ></text>
</g>
<g >
<title>secondary_startup_64 (6,341,040,644 samples, 0.11%)</title><rect x="1188.7" y="293" width="1.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1191.71" y="303.5" ></text>
</g>
<g >
<title>ggml_vec_relu_f32 (860,981,469 samples, 0.01%)</title><rect x="1172.2" y="101" width="0.2" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1175.21" y="111.5" ></text>
</g>
<g >
<title>do_idle (4,575,014,746 samples, 0.08%)</title><rect x="1189.1" y="245" width="0.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.07" y="255.5" ></text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (1,194,766,544 samples, 0.02%)</title><rect x="1181.4" y="101" width="0.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1184.38" y="111.5" ></text>
</g>
<g >
<title>__libc_write (965,641,462 samples, 0.02%)</title><rect x="1188.4" y="165" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1191.42" y="175.5" ></text>
</g>
<g >
<title>new_sync_write (901,362,800 samples, 0.02%)</title><rect x="1188.4" y="85" width="0.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1191.43" y="95.5" ></text>
</g>
<g >
<title>sum_i16_pairs_float (13,141,338,230 samples, 0.22%)</title><rect x="874.7" y="101" width="2.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="877.73" y="111.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (26,342,626,925 samples, 0.45%)</title><rect x="12.2" y="133" width="5.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="15.23" y="143.5" ></text>
</g>
<g >
<title>reschedule_interrupt (1,281,064,453 samples, 0.02%)</title><rect x="1188.8" y="213" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1191.79" y="223.5" ></text>
</g>
<g >
<title>ggml_graph_compute_thread (5,767,588,268,398 samples, 98.44%)</title><rect x="10.9" y="181" width="1161.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="13.89" y="191.5" >ggml_graph_compute_thread</text>
</g>
<g >
<title>runtime.goexit.abi0 (1,070,039,476 samples, 0.02%)</title><rect x="10.1" y="293" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="13.09" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (928,044,267 samples, 0.02%)</title><rect x="1188.4" y="149" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.43" y="159.5" ></text>
</g>
<g >
<title>cpu_startup_entry (1,763,160,983 samples, 0.03%)</title><rect x="1188.7" y="261" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1191.71" y="271.5" ></text>
</g>
<g >
<title>ksys_write (1,080,420,505 samples, 0.02%)</title><rect x="1188.2" y="181" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1191.18" y="191.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (1,665,362,193 samples, 0.03%)</title><rect x="1188.7" y="229" width="0.4" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1191.71" y="239.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/gc/scheduler.(*gcScheduler).run (501,538,998 samples, 0.01%)</title><rect x="10.1" y="261" width="0.1" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="13.09" y="271.5" ></text>
</g>
<g >
<title>llama_decode_internal (74,736,603,918 samples, 1.28%)</title><rect x="1172.6" y="213" width="15.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1175.56" y="223.5" ></text>
</g>
<g >
<title>mul_sum_i8_pairs_float (7,834,338,627 samples, 0.13%)</title><rect x="1170.0" y="133" width="1.5" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1172.97" y="143.5" ></text>
</g>
<g >
<title>ggml_vec_dot_q4_0_q8_0 (7,320,285,735 samples, 0.12%)</title><rect x="1186.1" y="117" width="1.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1189.12" y="127.5" ></text>
</g>
<g >
<title>sum_i16_pairs_float (8,313,602,850 samples, 0.14%)</title><rect x="1183.2" y="69" width="1.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1186.21" y="79.5" ></text>
</g>
<g >
<title>github.com/containerd/containerd/gc/scheduler.init.0.func1.1 (501,773,394 samples, 0.01%)</title><rect x="10.1" y="277" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="13.09" y="287.5" ></text>
</g>
<g >
<title>cpu_startup_entry (4,577,879,661 samples, 0.08%)</title><rect x="1189.1" y="261" width="0.9" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.07" y="271.5" ></text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (16,502,737,592 samples, 0.28%)</title><rect x="1120.4" y="117" width="3.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1123.37" y="127.5" ></text>
</g>
<g >
<title>mul_sum_us8_pairs_float (26,398,979,133 samples, 0.45%)</title><rect x="877.4" y="117" width="5.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="880.38" y="127.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (310,992,901,531 samples, 5.31%)</title><rect x="1057.7" y="117" width="62.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1060.74" y="127.5" >bytes_..</text>
</g>
<g >
<title>mul_sum_i8_pairs_float (1,944,384,610 samples, 0.03%)</title><rect x="1187.2" y="101" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1190.19" y="111.5" ></text>
</g>
<g >
<title>hsum_float_8 (9,453,413,728 samples, 0.16%)</title><rect x="647.0" y="117" width="1.9" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="649.98" y="127.5" ></text>
</g>
<g >
<title>acpi_ps_execute_method (936,685,922 samples, 0.02%)</title><rect x="10.5" y="181" width="0.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="13.49" y="191.5" ></text>
</g>
<g >
<title>quantize_row_q8_0 (786,727,831 samples, 0.01%)</title><rect x="898.6" y="133" width="0.2" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="901.60" y="143.5" ></text>
</g>
<g >
<title>ggml_vec_dot_q6_K_q8_K (553,471,741 samples, 0.01%)</title><rect x="1185.0" y="117" width="0.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1188.00" y="127.5" ></text>
</g>
<g >
<title>ggml_graph_compute (74,735,272,493 samples, 1.28%)</title><rect x="1172.6" y="181" width="15.0" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1175.56" y="191.5" ></text>
</g>
<g >
<title>mul_sum_us8_pairs_float (879,270,942,868 samples, 15.01%)</title><rect x="697.6" y="101" width="177.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="700.64" y="111.5" >mul_sum_us8_pairs_float</text>
</g>
<g >
<title>ggml_compute_forward (74,733,935,793 samples, 1.28%)</title><rect x="1172.6" y="149" width="15.0" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1175.56" y="159.5" ></text>
</g>
<g >
<title>acpi_os_execute_deferred (971,925,296 samples, 0.02%)</title><rect x="10.5" y="229" width="0.2" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="13.49" y="239.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (1,558,004,883,012 samples, 26.59%)</title><rect x="316.3" y="117" width="313.8" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="319.28" y="127.5" >bytes_from_nibbles_32</text>
</g>
<g >
<title>[perf_4.19] (1,178,483,451 samples, 0.02%)</title><rect x="1188.2" y="245" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.16" y="255.5" ></text>
</g>
<g >
<title>mul_sum_i8_pairs_float (16,230,744,960 samples, 0.28%)</title><rect x="1181.7" y="101" width="3.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1184.65" y="111.5" ></text>
</g>
<g >
<title>ggml_compute_forward_dup_f32 (1,715,239,610 samples, 0.03%)</title><rect x="11.1" y="117" width="0.3" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="14.08" y="127.5" ></text>
</g>
<g >
<title>ggml_graph_compute_helper (74,735,272,493 samples, 1.28%)</title><rect x="1172.6" y="197" width="15.0" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1175.56" y="207.5" ></text>
</g>
<g >
<title>ggml_compute_forward_relu (863,655,165 samples, 0.01%)</title><rect x="1172.2" y="133" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1175.21" y="143.5" ></text>
</g>
<g >
<title>intel_idle (3,159,143,597 samples, 0.05%)</title><rect x="1189.2" y="213" width="0.6" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1192.16" y="223.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::find (1,259,459,876 samples, 0.02%)</title><rect x="1187.7" y="213" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1190.72" y="223.5" ></text>
</g>
<g >
<title>hsum_float_8 (1,462,433,148 samples, 0.02%)</title><rect x="1123.7" y="117" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1126.70" y="127.5" ></text>
</g>
<g >
<title>runtime.scanobject (543,340,834 samples, 0.01%)</title><rect x="10.4" y="229" width="0.1" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="13.36" y="239.5" ></text>
</g>
<g >
<title>ggml_compute_forward_cpy (1,717,913,178 samples, 0.03%)</title><rect x="11.1" y="149" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="14.08" y="159.5" ></text>
</g>
<g >
<title>vfs_write (1,076,979,243 samples, 0.02%)</title><rect x="1188.2" y="165" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1191.18" y="175.5" ></text>
</g>
<g >
<title>[unknown] (1,169,508,432 samples, 0.02%)</title><rect x="1188.4" y="293" width="0.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1191.41" y="303.5" ></text>
</g>
<g >
<title>main (5,844,938,023,490 samples, 99.76%)</title><rect x="10.9" y="261" width="1177.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.86" y="271.5" >main</text>
</g>
<g >
<title>ggml_compute_forward_unary (863,655,165 samples, 0.01%)</title><rect x="1172.2" y="149" width="0.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1175.21" y="159.5" ></text>
</g>
<g >
<title>process_one_work (1,190,970,325 samples, 0.02%)</title><rect x="10.5" y="245" width="0.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="13.49" y="255.5" ></text>
</g>
<g >
<title>runtime.systemstack.abi0 (720,318,692 samples, 0.01%)</title><rect x="10.3" y="277" width="0.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="13.33" y="287.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (141,638,799,034 samples, 2.42%)</title><rect x="961.9" y="117" width="28.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="964.89" y="127.5" >by..</text>
</g>
<g >
<title>irq_exit (1,232,750,291 samples, 0.02%)</title><rect x="1188.8" y="197" width="0.2" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1191.80" y="207.5" ></text>
</g>
<g >
<title>__libc_start_main (5,844,939,360,679 samples, 99.76%)</title><rect x="10.9" y="277" width="1177.1" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="13.86" y="287.5" >__libc_start_main</text>
</g>
<g >
<title>ggml_graph_compute_thread (74,734,604,333 samples, 1.28%)</title><rect x="1172.6" y="165" width="15.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1175.56" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (926,003,489 samples, 0.02%)</title><rect x="1188.4" y="133" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.43" y="143.5" ></text>
</g>
<g >
<title>kthread (1,216,848,505 samples, 0.02%)</title><rect x="10.5" y="277" width="0.2" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="13.49" y="287.5" ></text>
</g>
<g >
<title>generic_perform_write (1,049,971,817 samples, 0.02%)</title><rect x="1188.2" y="101" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1191.19" y="111.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (2,631,163,047 samples, 0.04%)</title><rect x="1186.6" y="101" width="0.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1189.63" y="111.5" ></text>
</g>
<g >
<title>ggml_axpy_q4_0_q8_0 (4,088,000,529 samples, 0.07%)</title><rect x="1185.2" y="117" width="0.9" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1188.23" y="127.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (5,254,991,277 samples, 0.09%)</title><rect x="997.4" y="133" width="1.1" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1000.44" y="143.5" ></text>
</g>
<g >
<title>ret_from_fork (1,216,848,505 samples, 0.02%)</title><rect x="10.5" y="293" width="0.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="13.49" y="303.5" ></text>
</g>
<g >
<title>ggml_compute_forward_mul_mat_sparse (7,670,277,562 samples, 0.13%)</title><rect x="1186.1" y="133" width="1.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1189.06" y="143.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,058,777,053 samples, 0.02%)</title><rect x="1188.4" y="229" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.41" y="239.5" ></text>
</g>
<g >
<title>ggml_compute_forward_rope_f32 (1,753,380,300 samples, 0.03%)</title><rect x="1171.7" y="133" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1174.71" y="143.5" ></text>
</g>
<g >
<title>kworker/0:2-kac (1,222,347,793 samples, 0.02%)</title><rect x="10.5" y="309" width="0.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="13.48" y="319.5" ></text>
</g>
<g >
<title>__cosf_fma (793,466,785 samples, 0.01%)</title><rect x="1171.8" y="117" width="0.2" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1174.81" y="127.5" ></text>
</g>
<g >
<title>_nohz_idle_balance (1,218,181,807 samples, 0.02%)</title><rect x="1188.8" y="165" width="0.2" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="1191.80" y="175.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,256,189,518 samples, 0.02%)</title><rect x="1188.2" y="277" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.15" y="287.5" ></text>
</g>
<g >
<title>llama_decode (74,736,603,918 samples, 1.28%)</title><rect x="1172.6" y="229" width="15.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1175.56" y="239.5" ></text>
</g>
<g >
<title>mul_sum_us8_pairs_float (5,129,574,971 samples, 0.09%)</title><rect x="1168.9" y="117" width="1.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1171.93" y="127.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,040,956,133 samples, 0.02%)</title><rect x="1188.4" y="197" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.41" y="207.5" ></text>
</g>
<g >
<title>ggml_graph_compute (5,767,591,609,784 samples, 98.44%)</title><rect x="10.9" y="197" width="1161.6" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="13.89" y="207.5" >ggml_graph_compute</text>
</g>
<g >
<title>perf_4.19 (2,557,334,281 samples, 0.04%)</title><rect x="1188.2" y="309" width="0.5" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1191.15" y="319.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,243,167,428 samples, 0.02%)</title><rect x="1188.2" y="261" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.15" y="271.5" ></text>
</g>
<g >
<title>ggml_vec_mul_f32 (828,882,468 samples, 0.01%)</title><rect x="11.4" y="117" width="0.2" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="14.43" y="127.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,257,349,061 samples, 0.02%)</title><rect x="1188.2" y="293" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.15" y="303.5" ></text>
</g>
<g >
<title>__libc_write (1,147,140,076 samples, 0.02%)</title><rect x="1188.2" y="229" width="0.2" height="15.0" fill="rgb(238,154,37)" rx="2" ry="2" />
<text  x="1191.17" y="239.5" ></text>
</g>
<g >
<title>ggml_compute_forward_mul (842,920,888 samples, 0.01%)</title><rect x="11.4" y="149" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="14.43" y="159.5" ></text>
</g>
<g >
<title>ggml_graph_compute_helper (5,767,597,604,285 samples, 98.44%)</title><rect x="10.9" y="213" width="1161.6" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="13.89" y="223.5" >ggml_graph_compute_helper</text>
</g>
<g >
<title>bytes_from_nibbles_32 (1,258,711,119 samples, 0.02%)</title><rect x="1185.8" y="101" width="0.2" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1188.78" y="111.5" ></text>
</g>
<g >
<title>ggml_axpy_q4_0_q8_0 (466,861,496,560 samples, 7.97%)</title><rect x="899.5" y="133" width="94.1" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="902.53" y="143.5" >ggml_axpy_q..</text>
</g>
<g >
<title>ggml_compute_forward (5,767,503,396,058 samples, 98.44%)</title><rect x="10.9" y="165" width="1161.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="13.90" y="175.5" >ggml_compute_forward</text>
</g>
<g >
<title>runtime.goexit.abi0 (767,167,688 samples, 0.01%)</title><rect x="10.3" y="293" width="0.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="13.32" y="303.5" ></text>
</g>
<g >
<title>sum_i16_pairs_float (585,150,918,830 samples, 9.99%)</title><rect x="756.9" y="85" width="117.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="759.88" y="95.5" >sum_i16_pairs_..</text>
</g>
<g >
<title>ggml_vec_dot_q4_0_q8_0 (60,797,248,411 samples, 1.04%)</title><rect x="1172.8" y="117" width="12.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1175.76" y="127.5" ></text>
</g>
<g >
<title>ggml_vec_dot_q6_K_q8_K (39,140,799,583 samples, 0.67%)</title><rect x="882.7" y="133" width="7.9" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="885.72" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (745,351,708 samples, 0.01%)</title><rect x="1187.8" y="165" width="0.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1190.80" y="175.5" ></text>
</g>
<g >
<title>[perf_4.19] (1,058,593,500 samples, 0.02%)</title><rect x="1188.4" y="213" width="0.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1191.41" y="223.5" ></text>
</g>
<g >
<title>sum_i16_pairs_float (2,536,894,368 samples, 0.04%)</title><rect x="1168.4" y="101" width="0.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1171.41" y="111.5" ></text>
</g>
<g >
<title>mul_sum_us8_pairs_float (173,173,851,889 samples, 2.96%)</title><rect x="1133.5" y="101" width="34.9" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1136.54" y="111.5" >mu..</text>
</g>
<g >
<title>acpi_ev_asynch_execute_gpe_method (955,776,936 samples, 0.02%)</title><rect x="10.5" y="213" width="0.2" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="13.49" y="223.5" ></text>
</g>
<g >
<title>get_scale_shuffle (2,226,435,099 samples, 0.04%)</title><rect x="890.0" y="117" width="0.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="893.00" y="127.5" ></text>
</g>
<g >
<title>ggml_compute_forward_mul_mat_axpy_q4_0 (4,151,355,677 samples, 0.07%)</title><rect x="1185.2" y="133" width="0.9" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1188.23" y="143.5" ></text>
</g>
<g >
<title>mul_sum_i8_pairs_float (39,508,391,731 samples, 0.67%)</title><rect x="890.6" y="133" width="8.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="893.64" y="143.5" ></text>
</g>
<g >
<title>runtime.gcBgMarkWorker.func2 (720,261,939 samples, 0.01%)</title><rect x="10.3" y="261" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="13.33" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1,234,047,883 samples, 0.02%)</title><rect x="1187.7" y="197" width="0.3" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1190.73" y="207.5" ></text>
</g>
<g >
<title>llama_init_from_gpt_params (75,130,989,769 samples, 1.28%)</title><rect x="1172.6" y="245" width="15.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1175.56" y="255.5" ></text>
</g>
<g >
<title>llama_decode (5,767,914,617,475 samples, 98.45%)</title><rect x="10.9" y="245" width="1161.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.86" y="255.5" >llama_decode</text>
</g>
<g >
<title>acpi_ns_evaluate (952,095,869 samples, 0.02%)</title><rect x="10.5" y="197" width="0.2" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="13.49" y="207.5" ></text>
</g>
<g >
<title>get_scale_shuffle (553,919,225 samples, 0.01%)</title><rect x="17.5" y="133" width="0.1" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="20.53" y="143.5" ></text>
</g>
<g >
<title>sum_i16_pairs_float (977,473,823 samples, 0.02%)</title><rect x="1187.4" y="69" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1190.38" y="79.5" ></text>
</g>
<g >
<title>mul_sum_us8_pairs_float (12,561,380,310 samples, 0.21%)</title><rect x="1182.4" y="85" width="2.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1185.35" y="95.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1,226,200,227 samples, 0.02%)</title><rect x="1188.8" y="181" width="0.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1191.80" y="191.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (2,305,302,391 samples, 0.04%)</title><rect x="899.1" y="133" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="902.07" y="143.5" ></text>
</g>
<g >
<title>llama_sample_repetition_penalties (1,393,145,329 samples, 0.02%)</title><rect x="1187.7" y="229" width="0.3" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1190.70" y="239.5" ></text>
</g>
<g >
<title>swapper (6,387,436,184 samples, 0.11%)</title><rect x="1188.7" y="309" width="1.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1191.70" y="319.5" ></text>
</g>
<g >
<title>bytes_from_nibbles_32 (22,202,962,818 samples, 0.38%)</title><rect x="1176.9" y="101" width="4.5" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1179.91" y="111.5" ></text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (83,969,114,101 samples, 1.43%)</title><rect x="630.1" y="117" width="16.9" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="633.07" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,102,684,495 samples, 0.02%)</title><rect x="1188.2" y="213" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.18" y="223.5" ></text>
</g>
<g >
<title>generic_perform_write (890,620,396 samples, 0.02%)</title><rect x="1188.4" y="37" width="0.2" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1191.43" y="47.5" ></text>
</g>
<g >
<title>mul_sum_i8_pairs_float (223,113,591,558 samples, 3.81%)</title><rect x="1124.0" y="117" width="44.9" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="1126.99" y="127.5" >mul_..</text>
</g>
<g >
<title>ggml_compute_forward_mul_mat_sparse (881,368,284,155 samples, 15.04%)</title><rect x="994.1" y="149" width="177.5" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="997.10" y="159.5" >ggml_compute_forward_mu..</text>
</g>
<g >
<title>ggml_compute_forward_mul_mat_axpy_q4_0 (473,375,249,034 samples, 8.08%)</title><rect x="898.8" y="149" width="95.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="901.76" y="159.5" >ggml_comput..</text>
</g>
<g >
<title>__libc_start_main (1,168,092,755 samples, 0.02%)</title><rect x="1188.4" y="277" width="0.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1191.41" y="287.5" ></text>
</g>
<g >
<title>containerd (1,254,027,405 samples, 0.02%)</title><rect x="10.1" y="309" width="0.2" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="13.06" y="319.5" ></text>
</g>
<g >
<title>ggml_compute_forward_soft_max_f32 (661,759,933 samples, 0.01%)</title><rect x="1172.1" y="133" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1175.08" y="143.5" ></text>
</g>
<g >
<title>mul_sum_us8_pairs_float (1,513,078,412 samples, 0.03%)</title><rect x="1187.3" y="85" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1190.28" y="95.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (4,072,043,409 samples, 0.07%)</title><rect x="1189.1" y="229" width="0.8" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1192.08" y="239.5" ></text>
</g>
<g >
<title>ggml_lookup_fp16_to_fp32 (15,558,517,997 samples, 0.27%)</title><rect x="990.4" y="117" width="3.2" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="993.42" y="127.5" ></text>
</g>
<g >
<title>worker_thread (1,216,848,505 samples, 0.02%)</title><rect x="10.5" y="261" width="0.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="13.49" y="271.5" ></text>
</g>
<g >
<title>main (5,845,488,906,751 samples, 99.77%)</title><rect x="10.8" y="309" width="1177.3" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.84" y="319.5" >main</text>
</g>
<g >
<title>do_syscall_64 (1,100,131,209 samples, 0.02%)</title><rect x="1188.2" y="197" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.18" y="207.5" ></text>
</g>
</g>
</svg>
